// Code generated by Kitex v0.8.0. DO NOT EDIT.

package userservice

import (
	"context"
	user "github.com/FrazierLei/MyCC98/common/kitex_gen/user"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Signup":                 kitex.NewMethodInfo(signupHandler, newUserServiceSignupArgs, newUserServiceSignupResult, false),
		"Login":                  kitex.NewMethodInfo(loginHandler, newUserServiceLoginArgs, newUserServiceLoginResult, false),
		"FindOrCreate":           kitex.NewMethodInfo(findOrCreateHandler, newUserServiceFindOrCreateArgs, newUserServiceFindOrCreateResult, false),
		"Profile":                kitex.NewMethodInfo(profileHandler, newUserServiceProfileArgs, newUserServiceProfileResult, false),
		"UpdateNonSensitiveInfo": kitex.NewMethodInfo(updateNonSensitiveInfoHandler, newUserServiceUpdateNonSensitiveInfoArgs, newUserServiceUpdateNonSensitiveInfoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "user",
		"ServiceFilePath": `../idl/rpc/user.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func signupHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceSignupArgs)
	realResult := result.(*user.UserServiceSignupResult)
	success, err := handler.(user.UserService).Signup(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceSignupArgs() interface{} {
	return user.NewUserServiceSignupArgs()
}

func newUserServiceSignupResult() interface{} {
	return user.NewUserServiceSignupResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceLoginArgs)
	realResult := result.(*user.UserServiceLoginResult)
	success, err := handler.(user.UserService).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLoginArgs() interface{} {
	return user.NewUserServiceLoginArgs()
}

func newUserServiceLoginResult() interface{} {
	return user.NewUserServiceLoginResult()
}

func findOrCreateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceFindOrCreateArgs)
	realResult := result.(*user.UserServiceFindOrCreateResult)
	success, err := handler.(user.UserService).FindOrCreate(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFindOrCreateArgs() interface{} {
	return user.NewUserServiceFindOrCreateArgs()
}

func newUserServiceFindOrCreateResult() interface{} {
	return user.NewUserServiceFindOrCreateResult()
}

func profileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceProfileArgs)
	realResult := result.(*user.UserServiceProfileResult)
	success, err := handler.(user.UserService).Profile(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceProfileArgs() interface{} {
	return user.NewUserServiceProfileArgs()
}

func newUserServiceProfileResult() interface{} {
	return user.NewUserServiceProfileResult()
}

func updateNonSensitiveInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUpdateNonSensitiveInfoArgs)
	realResult := result.(*user.UserServiceUpdateNonSensitiveInfoResult)
	success, err := handler.(user.UserService).UpdateNonSensitiveInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUpdateNonSensitiveInfoArgs() interface{} {
	return user.NewUserServiceUpdateNonSensitiveInfoArgs()
}

func newUserServiceUpdateNonSensitiveInfoResult() interface{} {
	return user.NewUserServiceUpdateNonSensitiveInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Signup(ctx context.Context, req *user.SignupRequest) (r *user.SignupResponse, err error) {
	var _args user.UserServiceSignupArgs
	_args.Req = req
	var _result user.UserServiceSignupResult
	if err = p.c.Call(ctx, "Signup", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *user.LoginRequest) (r *user.LoginResponse, err error) {
	var _args user.UserServiceLoginArgs
	_args.Req = req
	var _result user.UserServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FindOrCreate(ctx context.Context, req *user.FindOrCreateRequest) (r *user.FindOrCreateResponse, err error) {
	var _args user.UserServiceFindOrCreateArgs
	_args.Req = req
	var _result user.UserServiceFindOrCreateResult
	if err = p.c.Call(ctx, "FindOrCreate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Profile(ctx context.Context, req *user.ProfileRequest) (r *user.ProfileResponse, err error) {
	var _args user.UserServiceProfileArgs
	_args.Req = req
	var _result user.UserServiceProfileResult
	if err = p.c.Call(ctx, "Profile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateNonSensitiveInfo(ctx context.Context, req *user.UpdateNonSensitiveInfoRequest) (r *user.UpdateNonSensitiveInfoResponse, err error) {
	var _args user.UserServiceUpdateNonSensitiveInfoArgs
	_args.Req = req
	var _result user.UserServiceUpdateNonSensitiveInfoResult
	if err = p.c.Call(ctx, "UpdateNonSensitiveInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
