// Code generated by Kitex v0.8.0. DO NOT EDIT.

package userservice

import (
	"context"
	user "github.com/FrazierLei/MyCC98/common/kitex_gen/user"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Signup(ctx context.Context, req *user.SignupRequest, callOptions ...callopt.Option) (r *user.SignupResponse, err error)
	Login(ctx context.Context, req *user.LoginRequest, callOptions ...callopt.Option) (r *user.LoginResponse, err error)
	FindOrCreate(ctx context.Context, req *user.FindOrCreateRequest, callOptions ...callopt.Option) (r *user.FindOrCreateResponse, err error)
	Profile(ctx context.Context, req *user.ProfileRequest, callOptions ...callopt.Option) (r *user.ProfileResponse, err error)
	UpdateNonSensitiveInfo(ctx context.Context, req *user.UpdateNonSensitiveInfoRequest, callOptions ...callopt.Option) (r *user.UpdateNonSensitiveInfoResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserServiceClient struct {
	*kClient
}

func (p *kUserServiceClient) Signup(ctx context.Context, req *user.SignupRequest, callOptions ...callopt.Option) (r *user.SignupResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Signup(ctx, req)
}

func (p *kUserServiceClient) Login(ctx context.Context, req *user.LoginRequest, callOptions ...callopt.Option) (r *user.LoginResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Login(ctx, req)
}

func (p *kUserServiceClient) FindOrCreate(ctx context.Context, req *user.FindOrCreateRequest, callOptions ...callopt.Option) (r *user.FindOrCreateResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindOrCreate(ctx, req)
}

func (p *kUserServiceClient) Profile(ctx context.Context, req *user.ProfileRequest, callOptions ...callopt.Option) (r *user.ProfileResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Profile(ctx, req)
}

func (p *kUserServiceClient) UpdateNonSensitiveInfo(ctx context.Context, req *user.UpdateNonSensitiveInfoRequest, callOptions ...callopt.Option) (r *user.UpdateNonSensitiveInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateNonSensitiveInfo(ctx, req)
}
